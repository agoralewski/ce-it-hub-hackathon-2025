{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the documentation for the Warehouse Management System! Here you'll find everything you need to get started, use, and maintain the application.</p>"},{"location":"#app-screenshot","title":"\ud83d\udcf8 App Screenshot","text":""},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"<ul> <li>Deployment Guide</li> <li>Maintenance</li> <li>Features</li> <li>User Guide</li> </ul>"},{"location":"EXPIRY_NOTIFICATIONS/","title":"Expiry Notification System","text":"<p>This document describes the expiry notification system that automatically sends emails when items in the warehouse are about to expire within a week or less.</p>"},{"location":"EXPIRY_NOTIFICATIONS/#overview","title":"Overview","text":"<p>The system includes: 1. A Django management command that checks for items expiring within 7 days 2. An automatic scheduler that runs this check daily at a configurable time (default: 8:00 AM) 3. Email notifications with detailed information about expiring items and their shelf locations</p>"},{"location":"EXPIRY_NOTIFICATIONS/#configuration","title":"Configuration","text":"<p>To configure the expiry notification system, add the following environment variables to your <code>.env</code> file:</p> <pre><code># Email settings\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your_email@gmail.com\nEMAIL_HOST_PASSWORD=your_app_password\n\n# Comma-separated list of email recipients for expiry notifications\n# (will always include EMAIL_HOST_USER if not already in the list)\nEXPIRY_NOTIFICATION_EMAILS=your_email@gmail.com,another_recipient@example.com\n\n# Enable or disable automatic expiry notifications (optional, defaults to True)\nENABLE_EXPIRY_NOTIFICATIONS=True\n\n# Time to send daily notifications (24-hour format, optional, defaults to 8:00 AM)\nNOTIFICATION_HOUR=8\nNOTIFICATION_MINUTE=0\n</code></pre> <p>For Gmail accounts, you need to create an app password: 1. Go to your Google Account &gt; Security 2. Under \"Signing in to Google,\" select 2-Step Verification 3. At the bottom of the page, select App passwords 4. Follow the steps to create a new app password 5. Use this generated password as EMAIL_HOST_PASSWORD</p>"},{"location":"EXPIRY_NOTIFICATIONS/#configuring-multiple-recipients","title":"Configuring Multiple Recipients","text":"<p>The system supports sending expiry notifications to multiple email addresses:</p> <ol> <li>Set the <code>EXPIRY_NOTIFICATION_EMAILS</code> variable in your <code>.env</code> file to a comma-separated list of email addresses</li> <li>The sender's email (<code>EMAIL_HOST_USER</code>) will automatically be included in the recipient list if not already specified</li> <li>Each email address will receive the same notification</li> </ol> <p>Example:</p> <pre><code>EXPIRY_NOTIFICATION_EMAILS=warehouse_manager@example.com,inventory_team@example.com,alerts@example.com\n</code></pre>"},{"location":"EXPIRY_NOTIFICATIONS/#automatic-daily-notifications","title":"Automatic Daily Notifications","text":"<p>By default, the system will automatically check for expiring items once per day at the configured time (default: 8:00 AM) and send email notifications if any items are expiring within a week or less. This feature is built into the application and requires no additional setup besides the email configuration.</p> <p>You can change the notification time by setting the <code>NOTIFICATION_HOUR</code> and <code>NOTIFICATION_MINUTE</code> variables in your <code>.env</code> file. These use 24-hour format (e.g., 14:30 for 2:30 PM).</p> <p>To disable automatic notifications, set <code>ENABLE_EXPIRY_NOTIFICATIONS=False</code> in your <code>.env</code> file.</p>"},{"location":"EXPIRY_NOTIFICATIONS/#running-manually","title":"Running Manually","text":"<p>You can run the expiry notification system manually using:</p> <pre><code>uv run manage.py send_expiry_notifications\n</code></pre> <p>or with Docker:</p> <pre><code>docker compose exec web uv run manage.py send_expiry_notifications\n</code></pre> <p>Alternatively, use the provided script:</p> <pre><code>./scripts/check_expiring_items.sh\n</code></pre>"},{"location":"EXPIRY_NOTIFICATIONS/#testing-email-configuration","title":"Testing Email Configuration","text":"<p>To verify that your email configuration works correctly, you can use any of these methods:</p>"},{"location":"EXPIRY_NOTIFICATIONS/#using-django-management-command","title":"Using Django Management Command","text":"<pre><code>uv run manage.py test_email_config\n</code></pre> <p>or with Docker:</p> <pre><code>docker compose exec web uv run manage.py test_email_config\n</code></pre> <p>To send the test email to a specific address, use the <code>--receiver</code> option:</p> <pre><code>uv run manage.py test_email_config --receiver=your.email@example.com\n</code></pre>"},{"location":"EXPIRY_NOTIFICATIONS/#using-the-standalone-test-script","title":"Using the Standalone Test Script","text":"<p>For a quick test without loading the entire Django application:</p> <pre><code>python warehouse/tests/test_email.py\n</code></pre> <p>This script directly uses your <code>.env</code> email settings to send a test message to all configured notification recipients.</p>"},{"location":"EXPIRY_NOTIFICATIONS/#testing-notification-time-configuration","title":"Testing Notification Time Configuration","text":"<p>To verify that your notification time is configured correctly:</p> <pre><code>./scripts/test_notification_time.sh\n</code></pre> <p>This script will display the current notification time settings from your <code>.env</code> file and confirm that Django is reading these values correctly.</p>"},{"location":"EXPIRY_NOTIFICATIONS/#setting-up-external-scheduled-execution-alternative","title":"Setting Up External Scheduled Execution (Alternative)","text":"<p>If you prefer not to use the built-in scheduler (or have disabled it), you can set up an external scheduler:</p>"},{"location":"EXPIRY_NOTIFICATIONS/#using-cron-linuxmacos","title":"Using Cron (Linux/macOS)","text":"<p>To run the command automatically on a schedule (e.g., daily at 8 AM), add a cron job:</p> <pre><code># Edit the crontab\ncrontab -e\n\n# Add this line to run daily at the time you want (e.g., 8 AM)\n0 8 * * * cd /path/to/your/project &amp;&amp; docker compose exec -T web uv run manage.py send_expiry_notifications\n</code></pre> <p>Note: If you're using an external scheduler like cron, you should set <code>ENABLE_EXPIRY_NOTIFICATIONS=False</code> in your <code>.env</code> file to avoid duplicate notifications.</p>"},{"location":"EXPIRY_NOTIFICATIONS/#using-task-scheduler-windows","title":"Using Task Scheduler (Windows)","text":"<ol> <li>Create a batch file (e.g., <code>send_notifications.bat</code>) with:    <code>cd /path/to/your/project    docker compose exec -T web uv run manage.py send_expiry_notifications</code></li> <li>Open Task Scheduler and create a new task to run this batch file daily</li> </ol>"},{"location":"EXPIRY_NOTIFICATIONS/#customization","title":"Customization","text":"<p>To modify the email content or criteria for expiring items, edit the <code>send_expiry_notifications.py</code> file in the <code>warehouse/management/commands/</code> directory.</p> <p>To change the time when daily notifications are sent, set the <code>NOTIFICATION_HOUR</code> and <code>NOTIFICATION_MINUTE</code> variables in your <code>.env</code> file. For example, to send notifications at 2:30 PM:</p> <pre><code>NOTIFICATION_HOUR=14\nNOTIFICATION_MINUTE=30\n</code></pre>"},{"location":"EXPIRY_NOTIFICATIONS/#available-scripts","title":"Available Scripts","text":"<p>The following scripts are available in the <code>scripts/</code> directory to help you manage expiry notifications:</p>"},{"location":"EXPIRY_NOTIFICATIONS/#checking-for-expiring-items","title":"Checking for Expiring Items","text":"<ul> <li><code>check_expiring_items.sh</code>: Runs the expiry notification check manually</li> <li>Automatically detects whether you're using Docker or direct execution</li> <li>Sends emails about items expiring within 7 days</li> </ul>"},{"location":"EXPIRY_NOTIFICATIONS/#testing-notification-configuration","title":"Testing Notification Configuration","text":"<ul> <li><code>test_notification_time.sh</code>: Tests the configured notification time</li> <li>Displays the current notification time from your <code>.env</code> file</li> <li> <p>Confirms that Django is reading these values correctly</p> </li> <li> <p><code>test_email.py</code> (in warehouse/tests/): Directly tests email sending without running Django</p> </li> <li>Uses the settings from your <code>.env</code> file</li> <li>Sends a test email to all configured notification recipients</li> <li>Provides detailed output about the email configuration being used</li> </ul>"},{"location":"PASSWORD_RESET/","title":"Password Reset Functionality","text":"<p>This document describes the password reset functionality in the KSP (Krwinkowy System Prezentowy) application.</p>"},{"location":"PASSWORD_RESET/#overview","title":"Overview","text":"<p>The password reset system allows users to reset their password if they forget it. The system sends an email with a secure link that allows the user to set a new password.</p>"},{"location":"PASSWORD_RESET/#how-it-works","title":"How It Works","text":"<ol> <li>User clicks \"Forgot Password?\" on the login page</li> <li>User enters their email address</li> <li>System sends a password reset link to that email</li> <li>User clicks the link in the email</li> <li>User enters a new password</li> <li>User is redirected to the login page with their new password</li> </ol>"},{"location":"PASSWORD_RESET/#configuration","title":"Configuration","text":"<p>The password reset system uses the email settings configured in your <code>.env</code> file:</p> <pre><code># Email settings\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=465\nEMAIL_USE_TLS=False\nEMAIL_USE_SSL=True\nEMAIL_HOST_USER=your_email@gmail.com\nEMAIL_HOST_PASSWORD=your_app_password\nDEFAULT_FROM_EMAIL=your_email@gmail.com\n\n# Domain for password reset links\nSITE_DOMAIN=your-actual-domain.com\n</code></pre> <p>For Gmail accounts, you need to create an app password: 1. Go to your Google Account &gt; Security 2. Under \"Signing in to Google,\" select 2-Step Verification 3. At the bottom of the page, select App passwords 4. Follow the steps to create a new app password 5. Use this generated password as EMAIL_HOST_PASSWORD</p>"},{"location":"PASSWORD_RESET/#setting-up-the-site-domain","title":"Setting Up the Site Domain","text":"<p>The password reset links include the domain of your site. There are several ways to set this up:</p>"},{"location":"PASSWORD_RESET/#1-using-the-site_domain-environment-variable-recommended","title":"1. Using the SITE_DOMAIN Environment Variable (Recommended)","text":"<p>Add the <code>SITE_DOMAIN</code> variable to your <code>.env</code> file:</p> <pre><code>SITE_DOMAIN=your-actual-domain.com\n</code></pre> <p>Then run the setup script which will use this domain:</p> <pre><code>./scripts/setup_password_reset.sh\n</code></pre>"},{"location":"PASSWORD_RESET/#2-using-the-update-script","title":"2. Using the Update Script","text":"<p>We've provided a simple script to update the site domain:</p> <pre><code># Update the site domain to example.com\n./scripts/update_site_domain.sh example.com\n\n# Use the SITE_DOMAIN from .env or auto-detect\n./scripts/update_site_domain.sh\n</code></pre> <p>This script will also offer to update your <code>.env</code> file to make the change permanent.</p>"},{"location":"PASSWORD_RESET/#3-checking-your-configuration","title":"3. Checking Your Configuration","text":"<p>To verify that your site domain is correctly configured:</p> <pre><code>./scripts/check_reset_domain.sh\n</code></pre> <p>This will show your current domain settings and validate that the password reset URLs will use the correct domain.</p>"},{"location":"PASSWORD_RESET/#4-using-the-command-line-directly","title":"4. Using the Command Line Directly","text":"<p>You can set the domain directly using the management command:</p> <pre><code>uv run manage.py update_site --domain=your-actual-domain.com\n</code></pre> <p>Or with Docker:</p> <pre><code>docker compose exec web uv run manage.py update_site --domain=your-actual-domain.com\n</code></pre> <p>Remember that running these commands only changes the site domain in the database. To make the change permanent (surviving database resets), add the <code>SITE_DOMAIN</code> variable to your <code>.env</code> file.</p>"},{"location":"PASSWORD_RESET/#5-auto-detection","title":"5. Auto-detection","text":"<p>If you don't specify a domain via the <code>SITE_DOMAIN</code> variable or the <code>--domain</code> parameter, the system will try to auto-detect your network IP. However, this is only suitable for local development and testing.</p>"},{"location":"PASSWORD_RESET/#testing-the-password-reset-system","title":"Testing the Password Reset System","text":"<p>You can test the password reset system with the following command:</p> <pre><code>uv run manage.py test_password_reset user@example.com\n</code></pre> <p>Or with Docker:</p> <pre><code>docker compose exec web python manage.py test_password_reset user@example.com\n</code></pre> <p>Replace <code>user@example.com</code> with an email address associated with a user in the system.</p>"},{"location":"PASSWORD_RESET/#available-scripts","title":"Available Scripts","text":"<p>The following scripts are available in the <code>scripts/</code> directory to help you manage password reset functionality:</p>"},{"location":"PASSWORD_RESET/#setting-up-password-reset","title":"Setting Up Password Reset","text":"<ul> <li><code>setup_password_reset.sh</code>: Main script to set up password reset functionality</li> <li>Runs migrations for the sites framework</li> <li>Updates the site domain for password reset links</li> <li>Tests the password reset email sending</li> </ul>"},{"location":"PASSWORD_RESET/#managing-the-site-domain","title":"Managing the Site Domain","text":"<ul> <li><code>update_site_domain.sh</code>: Updates the site domain used in password reset links</li> <li>Can also update the .env file to make the change permanent</li> <li> <p>Usage: <code>./scripts/update_site_domain.sh example.com</code></p> </li> <li> <p><code>check_reset_domain.sh</code>: Checks if the site domain is properly configured</p> </li> <li>Validates the current domain settings</li> <li>Shows an example of what a password reset URL would look like</li> <li>Verifies that the database domain matches the .env configuration</li> </ul>"},{"location":"PASSWORD_RESET/#troubleshooting","title":"Troubleshooting","text":"<p>If password reset emails are not being sent:</p> <ol> <li>Check that your email settings are correct in <code>.env</code></li> <li>Verify that the user has a valid email address in the system</li> <li>Check your email spam folder</li> <li>Try the test command to see detailed error messages</li> <li>For Gmail, ensure that \"Less secure app access\" is enabled or that you're using an app password</li> </ol>"},{"location":"PASSWORD_RESET/#security-considerations","title":"Security Considerations","text":"<ol> <li>Password reset links expire after a certain period for security</li> <li>Each link can only be used once</li> <li>Links are cryptographically secure and cannot be guessed</li> </ol>"},{"location":"deploy/","title":"Deployment Guide","text":"<p>This guide explains how to deploy the Warehouse Management application using Docker and Nginx for production environments.</p>"},{"location":"deploy/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>Git (to clone the repository)</li> <li>Port 80 available on the host machine</li> </ul>"},{"location":"deploy/#deployment-steps","title":"Deployment Steps","text":""},{"location":"deploy/#1-clone-the-repository","title":"1. Clone the repository","text":"<pre><code>git clone https://github.com/yourusername/ce-it-hub-hackathon-2025.git ksp\ncd ksp\n</code></pre>"},{"location":"deploy/#2a-use-uv-to-create-a-virtual-environment-and-install-dependencies","title":"2.A Use uv to create a virtual environment and install dependencies","text":"<p>Install uv</p> <pre><code>uv sync\n</code></pre>"},{"location":"deploy/#3-configure-environment-variables","title":"3. Configure environment variables","text":"<p>Copy the example environment file and update it with your settings:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit the <code>.env</code> file with your specific configuration: - Set a secure <code>SECRET_KEY</code> - Set all listed usernames and passwords in the .env file - Set the correct network ip by running: <code>./scripts/set_network_ip.sh</code> from the <code>ksp</code> directory.</p> <p>IMPORTANT: The <code>NETWORK_HOST</code> variable is critical for QR code functionality. If not set correctly, QR codes will not point to your server's IP address or domain name, making them inaccessible on mobile devices.</p>"},{"location":"deploy/#4-build-the-application","title":"4. Build the application","text":"<ul> <li>Build the application by running: <code>docker compose up</code></li> </ul> <p>This will: - Build the Docker images for your Django application and Nginx - Start the PostgreSQL database - Start the Django application with Gunicorn - Start the Nginx web server</p>"},{"location":"deploy/#5-run-databse-migrations-and-superuser-creation","title":"5. Run databse migrations and superuser creation","text":"<p>Follow the guided script to create the superuser and run django migrations.</p> <pre><code>./scripts/manage_django.sh\n</code></pre>"},{"location":"deploy/#6-access-the-application","title":"6. Access the Application","text":"<p>Your application will now be available at: - <code>http://localhost/warehouse/</code> (if accessing from the same machine) - <code>http://your-ip-address/warehouse</code> (if accessing from other devices on the network). Ensure you are using <code>http</code> and not <code>https</code>. Since there is no domain or certificate for this application, https cannot be used.</p> <p>Check your IP address with:</p> <pre><code># On macOS\nipconfig getifaddr en0\n\n# On Linux\nhostname -I | awk '{print $1}'\n</code></pre>"},{"location":"deploy/#optional-run-the-static-files-rebuild-script","title":"(Optional). Run the Static Files Rebuild Script","text":"<p>This step is applicable only if you encounter issues with static files not loading correctly.</p> <p>Symptoms: - CSS styles are missing - JavaScript functionality is broken - Images don't appear - Browser console shows 404 errors for static files</p> <p>Solutions: 1. Hard refresh your browser (Ctrl+F5 or Cmd+Shift+R) 2. Run the script <code>sudo ./scripts/rebuild_static.sh</code> 3. (if 2 didn't fix) Clear browser cache</p> <p>This script will: - Stop all containers - Clean the staticfiles directory - Create required directories with correct permissions - Rebuild and restart containers - Run the collectstatic command</p>"},{"location":"deploy/#troubleshooting","title":"Troubleshooting","text":"<ol> <li> <p>Ensure you did not skip any steps, especially running the required scripts (<code>set_network_ip.sh</code> and <code>manage.django.sh</code>)</p> </li> <li> <p>Check if all containers are running:    <code>docker compose ps</code></p> </li> <li> <p>Check the logs for errors:    <code>docker compose logs</code></p> </li> <li> <p>Verify that the Nginx configuration is correct:    <code>docker compose exec nginx nginx -t</code></p> </li> <li> <p>Ensure your firewall allows traffic on port 80.</p> </li> </ol>"},{"location":"features/","title":"Features","text":""},{"location":"features/#system-architecture","title":"System Architecture","text":"<p>The system consists of the following components:</p> <ol> <li>Django Web Application - The main backend application serving dynamic content via Gunicorn</li> <li>PostgreSQL Database - Stores all application data</li> <li>Nginx - Reverse proxy that handles HTTP requests, static file serving, and routing</li> </ol>"},{"location":"features/#key-features","title":"Key features","text":"<ul> <li>User authentication with admin and standard user roles</li> <li>Warehouse organization with rooms, racks, and shelves</li> <li>Item tracking with categories, expiration dates, and location</li> <li>Mobile-responsive interface for easy inventory management</li> <li>QR code generation for quick access to shelf information</li> <li>Excel export functionality for inventory reports</li> <li>Email notifications for expiring items and password reset</li> <li>Multiple language support (Polish and English)</li> </ul>"},{"location":"features/#networking-setup","title":"Networking Setup","text":"<p>The application is, as requested, only available on local network, so no https, domains, or certificates are issued for it. Mobile devices connecting to the application need to be connected to the same network as the host.</p>"},{"location":"features/#user-types","title":"User Types","text":"<ol> <li> <p>Warehouse Administrator:    -Full access to all application features    -Can manage warehouse structure (rooms, racks, shelves)    -Can manage item categories    -Can export to excel    -Can view history of item movements (removals, additions)</p> </li> <li> <p>Regular User:    -Can view the inventory    -Can add/remove items from shelves    -Can filter and search for items</p> </li> </ol>"},{"location":"maintenance/","title":"Maintenance","text":""},{"location":"maintenance/#test-qr-code-functionality","title":"Test QR Code Functionality","text":"<p>The application generates QR codes for each shelf that can be scanned with mobile devices to quickly access shelf information. For this to work correctly:</p> <ol> <li> <p>Test the QR codes by:    -Navigating to a shelf detail page (eg. <code>/warehouse/shelves/1</code>)    -Scanning the QR code with a mobile device    -Confirming it connects to the correct shelf page</p> </li> <li> <p>If the code scanning does not work or if QR codes show \"localhost\" URLs (which won't work on mobile devices), you need to set the <code>NETWORK_HOST</code> environment variable to your server's IP address or domain name, by running <code>./scripts/set_network_ip.sh</code>. You can check if it got correctly set in the <code>.env</code> file. You should see: <code>NETWORK_HOST=your-server-ip-or-hostname</code></p> </li> </ol>"},{"location":"maintenance/#app-translations","title":"App translations","text":"<p>Translations are automatically generated and come bundled in this git repo. This document is only applicable if you need to regenerate them yourself after changing something in the code.</p> <p>You need to have gettext installed (https://www.drupal.org/docs/8/modules/potion/how-to-install-setup-gettext).</p> <p>Then, run the following commands.</p> <pre><code>uv run python manage.py makemessages -l en -l pl\nuv run python manage.py compilemessages -l en -l pl\n</code></pre>"},{"location":"maintenance/#updating-the-application","title":"Updating the Application","text":"<pre><code>git pull\ndocker compose down\ndocker compose up -d --build\n</code></pre>"},{"location":"maintenance/#backing-up-the-database","title":"Backing Up the Database","text":"<p>Consider regular database backups for production deployments.</p> <pre><code>docker compose exec db pg_dump -U kspuser ksp &gt; backup_$(date +%Y%m%d).sql\n</code></pre>"},{"location":"maintenance/#viewing-logs","title":"Viewing Logs","text":"<pre><code># Web application logs\ndocker compose logs web\n\n# Nginx logs\ndocker compose logs nginx\n\n# Database logs\ndocker compose logs db\n</code></pre>"},{"location":"maintenance/#database-data-model","title":"Database Data Model","text":"<pre><code>erDiagram\n    user {\n        id int\n        username string\n        email string\n        password string\n        is_superuser Boolean\n    }\n    item_shelf_assignment {\n        id int\n        item_id int\n        shelf_id int\n        added_by int\n        removed_by int\n        add_date date\n        remove_date date\n    }\n    item {\n        id int\n        name string\n        category_id int\n        manufacturer string\n        expiration_date date\n        note string\n        is_gifted Boolean\n    }\n    category {\n        id int\n        name string\n    }\n    shelf {\n        id int\n        number int\n        rack_id int\n    }\n    rack {\n        id int\n        name char\n        room_id int\n    }\n    room {\n        id int\n        name string\n        warehouse_id int\n    }\n\n    user ||--o{ item_shelf_assignment: \"1:*\"\n    item_shelf_assignment }o--|| item : \"*:1\"\n    item }o--|| category : \"*:1\"\n    item_shelf_assignment }o--|| shelf : \"*:1\"\n    shelf }o--|| rack : \"*:1\"\n    rack }o--|| room : \"*:1\"\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#create-your-user","title":"Create your user","text":""},{"location":"user_guide/#reset-your-password","title":"Reset your password","text":""},{"location":"user_guide/#manage-item-categories-admin-only","title":"Manage item categories (admin only)","text":""},{"location":"user_guide/#manage-warehouse-rooms-admin-only","title":"Manage warehouse rooms (admin only)","text":""},{"location":"user_guide/#manage-warehouse-racks-admin-only","title":"Manage warehouse racks (admin only)","text":""},{"location":"user_guide/#manage-warehouse-shelves-admin-only","title":"Manage warehouse shelves (admin only)","text":""},{"location":"user_guide/#create-shelf-qr-codes-admin-only","title":"Create shelf QR codes (admin only)","text":""},{"location":"user_guide/#add-an-item-to-a-shelf","title":"Add an item to a shelf","text":""},{"location":"user_guide/#take-an-item-from-a-shelf","title":"Take an item from a shelf","text":""},{"location":"user_guide/#move-an-item-to-another-shelf","title":"Move an item to another shelf","text":""},{"location":"user_guide/#show-all-items","title":"Show all items","text":""},{"location":"user_guide/#show-expired-or-nearly-expired-items","title":"Show expired or nearly expired items","text":""},{"location":"user_guide/#combine-the-filters","title":"Combine the filters","text":""},{"location":"user_guide/#view-low-stock-categories","title":"View low stock categories","text":""},{"location":"user_guide/#export-inventory-to-excel-admin-only","title":"Export inventory to excel (admin only)","text":""}]}